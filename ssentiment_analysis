# STEP 1: Install compatible packages
!pip install -U nltk wordcloud
!pip install scikit-learn==1.6.1 --quiet

# STEP 2: Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import nltk
import re
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
from wordcloud import WordCloud
nltk.download('stopwords')
from nltk.corpus import stopwords

# STEP 3: Load real dataset
url = 'https://raw.githubusercontent.com/dD2405/Twitter_Sentiment_Analysis/master/train.csv'
df = pd.read_csv(url)
df = df[['tweet', 'label']]
df.columns = ['text', 'label']

# STEP 4: Clean text
stop_words = set(stopwords.words('english'))

def preprocess(text):
    text = text.lower()
    text = re.sub(r'http\S+|www\S+', '', text)
    text = re.sub(r'[^a-z\s]', '', text)
    text = ' '.join([word for word in text.split() if word not in stop_words])
    return text

df['clean_text'] = df['text'].apply(preprocess)

# STEP 5: WordCloud visualizations
pos_text = ' '.join(df[df['label'] == 1]['clean_text'])
neg_text = ' '.join(df[df['label'] == 0]['clean_text'])

plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.imshow(WordCloud(width=400, height=300, background_color='white').generate(pos_text))
plt.axis('off')
plt.title("Positive Sentiment")

plt.subplot(1, 2, 2)
plt.imshow(WordCloud(width=400, height=300, background_color='white').generate(neg_text))
plt.axis('off')
plt.title("Negative Sentiment")
plt.tight_layout()
plt.show()

# STEP 6: Vectorize text with TF-IDF
vectorizer = TfidfVectorizer(max_features=5000)
X = vectorizer.fit_transform(df['clean_text'])
y = df['label']

# STEP 7: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# STEP 8: Train model
model = LogisticRegression()
model.fit(X_train, y_train)

# STEP 9: Evaluate model
y_pred = model.predict(X_test)
print("Classification Report:\n")
print(classification_report(y_test, y_pred))

# STEP 10: Confusion matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# STEP 11: Accuracy summary
accuracy = model.score(X_test, y_test)
print(f"âœ… Model Accuracy: {accuracy:.2%}")
